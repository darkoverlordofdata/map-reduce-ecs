{"version":3,"sources":["..\\..\\..\\..\\lib\\Systems\\TweenSystem.fs"],"names":[],"mappings":";;;;;;;;AAkBe;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AACQ;AAAb;AACc;AAAI,0CAAW,gBAAX;AACC,0CAAW,gBAAX;AACI;;AACrB,4BAAG,UAAH,EACI;AAAA;AACA;AACA;AAAe,yBAHnB,MAIA;AAAA,gCAAK,UAAL,EACI;AAAA;AACA;AACA;AAAe;AAAA;;AAIE;AACA;AAHrB;AAZa;AAF+B,iBAAzC;AAAA;AAAyC;AAAA,aAAzC;AAAA;AAAyC;AAAA,SAAzC;AAAA;AAAyC;AAAA","file":"TweenSystem.js","sourcesContent":["\r\nnamespace Systems\r\n\r\n#if FABLE\r\nopen Fable.Core\r\nopen Fable.Import\r\nopen Fable.Import.Browser\r\nopen Fable.Core.JsInterop\r\n#endif\r\nopen Bosco\r\nopen Components\r\nopen Entities\r\nopen SystemInterface\r\nopen System.Collections.Generic\r\n\r\n[<AutoOpen>]\r\nmodule TweenSystemModule =\r\n    let TweenSystem (delta:float, game:SystemInterface) entity =\r\n        match (entity.Scale, entity.Tween, entity.Active) with\r\n        | Some(scale), Some(sa), true ->        \r\n            let mutable x = scale.x + (sa.Speed * delta)\r\n            let mutable y =  scale.y + (sa.Speed * delta)\r\n            let mutable active = sa.Active\r\n            if x > sa.Max then\r\n                x <- sa.Max\r\n                y <- sa.Max\r\n                active <- false\r\n            elif x < sa.Min then\r\n                x <- sa.Min\r\n                y <- sa.Min\r\n                active <- false\r\n\r\n            {\r\n                entity with\r\n                    Scale = Some(PIXI.Point(x, y));\r\n                    Tween = Some(CreateTween(sa.Min, sa.Max, sa.Speed, sa.Repeat, active));\r\n            }\r\n\r\n        | _ -> \r\n            entity\r\n\r\n"]}