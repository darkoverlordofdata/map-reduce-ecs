{"version":3,"sources":["..\\..\\..\\..\\lib\\Systems\\CollisionSystem.fs"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAiBY;AAAI;AACA;AACA;AACA;AACR,2CAAW,IAAI,KAAf,EAAqB,IAAI,KAAzB;AAJK;;AASD;AACM;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,+CAEF;AAAA;AACA;;AACM;AAAA;AAAA,uCAEE;AAAS;;AACb,wCAAG,WAAH,EACI;AAAA;AAAA;AACA;AAGC,qCALL,MAOI;AAEsB;AAFtB;AAGC;AAXK;AAaH,6BAnBT;AAAA;AAA8C;AAAA,yBAA9C;AAAA;AAA8C;AAAA,qBAA9C;AAAA;AAA8C;AAAA,iBAA9C;AAAA;AAA8C;AAAA,aAA9C;AAAA;;AAuBA;AAAA;AAAA,qDAGE;AAAI,4BAAI,6FAAJ,GACI,0CADJ;AAIR;AAJK,iBAAD,EAHF;AAAA;AAAA;;AAUA;AAAA;AAAA,4CAGE;AAAI;AACR,qDAAkB,mCAAlB;AADK,iBAAD,EAHF;AAAA;AAAA;;AAMV,uCAAuB,oBAAvB;AAxCqB","file":"CollisionSystem.js","sourcesContent":["namespace Systems\r\n\r\n#if HTML5\r\nopen Fable.Core\r\nopen Fable.Import\r\nopen Fable.Import.Browser\r\nopen Fable.Core.JsInterop\r\n#endif\r\nopen Bosco\r\nopen Components\r\nopen Entities\r\nopen System.Collections.Generic\r\n\r\n[<AutoOpen>]\r\nmodule CollisionSystemModule =\r\n    (** Return Rect defining the current bounds *)\r\n    let BoundingRect(entity) =\r\n        let x = entity.Position.x\r\n        let y = entity.Position.y\r\n        let w = entity.Size.x\r\n        let h = entity.Size.y\r\n        CreateRect(x - w/2., y - h/2., w, h):>PIXI.HitArea\r\n\r\n    (** Collision Handler for Entities *)\r\n    let CollisionSystem (game:SystemInterface) entities =\r\n\r\n        let findCollision a b =\r\n            match a.EntityType, a.Active, b.EntityType, b.Active with\r\n            | EntityType.Enemy, true, EntityType.Bullet, true -> \r\n                game.AddBang(b.Position.x, b.Position.y, 1.0)\r\n                game.RemoveEntity(b.Id)\r\n                match a.Health with\r\n                | Some(h) ->\r\n                    let health = h.CurHealth-1\r\n                    if health <= 0 then\r\n                        game.AddExplosion(b.Position.x, b.Position.y, 0.5)\r\n                        {\r\n                            a with\r\n                                Active = false;\r\n                        }\r\n                    else\r\n                        {\r\n                            a with \r\n                                Health = Some(CreateHealth(health, h.MaxHealth));\r\n                        }\r\n\r\n                | None -> a\r\n            | _ -> a\r\n\r\n        let rec figureCollisions (entity:Entity) (sortedEntities:Entity list) =\r\n            match sortedEntities with\r\n            | [] -> entity\r\n            | x :: xs -> \r\n                let a = if (BoundingRect(entity).contains(x.Position.x, x.Position.y)) then\r\n                            findCollision entity x\r\n                        else\r\n                            entity\r\n                figureCollisions a xs\r\n\r\n        let rec fixCollisions (toFix:Entity list) (alreadyFixed:Entity list) =\r\n            match toFix with\r\n            | [] -> alreadyFixed\r\n            | x :: xs -> \r\n                let a = figureCollisions x alreadyFixed\r\n                fixCollisions xs (a::alreadyFixed)\r\n\r\n        fixCollisions entities []\r\n"]}