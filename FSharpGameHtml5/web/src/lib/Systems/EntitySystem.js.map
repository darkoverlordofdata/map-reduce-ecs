{"version":3,"sources":["..\\..\\..\\..\\lib\\Systems\\EntitySystem.fs"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAoBc;AAAA,+BAEU;AAAA;;AAEF;AAAA;AAAA,4CAGC,iBAAH,GACI;AAAA;AACC;AAAwB,qBADzB,EADJ,GAII,2BAAI,2BAAJ,CAPF,GACE,oBADF;AAAA;AAAA;;AASA;AACV,8BAAoB,0BAAoC;AAAA;AAAA,aAApC,CAApB;AAGiB;AAFjB;AAbmB,SAAP,EAFV,GAqBI;AAAA;;AAAA;AAEI;AAAA;AAAA;AAAA;;AAAA,yDAGF;AAAA;AAAA;AAAA;AAKmB;AARjB,wCAIF,4NAJE;AASD,6BATC;AAAA;AAAA;AAAY;AAAZ;AAAY;;AAWZ;AAAA;AAAA;AAAA;;AAAA,0DAGN;AAAA;AAAA;;AAIuB,yGAA2B,UAA3B,YAAuC,MAAvC;;AACG;AARpB,wCAIN,8NAJM;AASD,6BATC;AAAA;AAAA;AAAa;AAAb;AAAa;;AAWb;AAAA;AAAA;AAAA;;AAAA,2DAGF;AAAA;AAAA;;AAImB,0GAA2B,UAA3B,YAAuC,OAAvC;;AACG;;AARpB,wCAIF,iOAJE;AASD,6BATC;AAAA;AAAA;AAAa;AAAb;AAAa;;AAWb;AAAA;AAAA;AAAA;;AAAA,2DAGF;AAAA;AAAA;;AAImB,0GAA2B,WAA3B,YAAwC,OAAxC;;AACG;;AARpB,wCAIF,kOAJE;AASD,6BATC;AAAA;AAAA;AAAa;AAAb;AAAa;;AAWb;AAAA;AAAA;AAAA;;AAAA,2DAGF;AAAA;AAAA;AAAA;AAKqB;;AACF;;AATjB,wCAIF,0NAJE;AAUD,6BAVC;AAAA;AAAA;AAAe;AAAf;AAAe;;AAYf;AAAA;AAAA;AAAA;;AAAA,2DAGF;AAAA;AAAA;AAAA;;AAKqB;;AACF;;AATjB,wCAIF,4NAJE;AAUD,6BAVC;AAAA;AAAA;AAAU;AAAV;AAAU;;AA1Dd;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAY,SAAZ,EArBJ;AAAa","file":"EntitySystem.js","sourcesContent":["namespace Systems\r\n\r\n#if HTML5\r\nopen Fable.Core\r\nopen Fable.Import\r\nopen Fable.Import.Browser\r\nopen Fable.Core.JsInterop\r\n#endif\r\nopen Bosco\r\nopen Components\r\nopen Entities\r\nopen System.Collections.Generic\r\n\r\n[<AutoOpen>]\r\nmodule EntitySystemModule =\r\n    (**\r\n    * Activate / Deactiveate Entities as needed \r\n    *)\r\n    let EntitySystem (game:SystemInterface, width: int, height: int) entity =\r\n\r\n        match entity.Active with\r\n        | true -> \r\n            let mutable removed = false\r\n            let rec removeIf l predicate =\r\n                match l with\r\n                | [] -> []\r\n                | x::rest -> \r\n                    if predicate(x) then \r\n                        removed <- true\r\n                        (removeIf rest predicate) \r\n                    else \r\n                        x::(removeIf rest predicate)\r\n\r\n            let len = game.Deactivate.Length\r\n            game.Deactivate <- (removeIf game.Deactivate (fun id -> id = entity.Id))\r\n            {\r\n                entity with \r\n                    Active = not removed;\r\n            }\r\n\r\n        | false -> \r\n            match entity.Layer with\r\n            | Layer.BULLET ->\r\n                match game.Bullets with\r\n                | [] -> entity\r\n                | bullet :: rest ->\r\n                    game.Bullets <- rest\r\n                    {            \r\n                        entity with\r\n                            Active = true;\r\n                            Expires = Some(0.5);                        \r\n                            Position = CreatePoint(bullet.X, bullet.Y);\r\n                    }\r\n            | Layer.ENEMY1 ->\r\n                match game.Enemies1 with\r\n                | [] -> entity\r\n                | enemy :: rest ->\r\n                game.Enemies1 <- rest\r\n                {\r\n                        entity with \r\n                            Active = true;\r\n                            Position = CreatePoint(float(rnd.Next(width-35)), 91./2.0);\r\n                            Health = Some(CreateHealth(10, 10));\r\n                    }\r\n            | Layer.ENEMY2 ->\r\n                match game.Enemies2 with\r\n                | [] -> entity\r\n                | enemy :: rest ->\r\n                    game.Enemies2 <- rest\r\n                    {\r\n                        entity with \r\n                            Active = true;\r\n                            Position = CreatePoint(float(rnd.Next(width-86)), 172./2.);\r\n                            Health = Some(CreateHealth(20, 20));                \r\n                    }\r\n            | Layer.ENEMY3 ->\r\n                match game.Enemies3 with\r\n                | [] -> entity\r\n                | enemy :: rest ->\r\n                    game.Enemies3 <- rest\r\n                    {\r\n                        entity with \r\n                            Active = true;\r\n                            Position = CreatePoint(float(rnd.Next(width-160)), 320./2.);\r\n                            Health = Some(CreateHealth(60, 60));                \r\n                    }\r\n            | Layer.EXPLOSION ->\r\n                match game.Explosions with\r\n                | [] -> entity\r\n                | exp :: rest ->\r\n                    game.Explosions <- rest\r\n                    {\r\n                        entity with \r\n                            Active = true;\r\n                            Expires = Some(0.2);                        \r\n                            Scale = Some(CreatePoint(exp.Scale, exp.Scale));\r\n                            Position = CreatePoint(exp.X, exp.Y);\r\n                    }\r\n            | Layer.BANG ->\r\n                match game.Bangs with\r\n                | [] -> entity\r\n                | exp :: rest ->\r\n                    game.Bangs <- rest\r\n                    {\r\n                        entity with \r\n                            Active = true;\r\n                            Expires = Some(0.2);                        \r\n                            Scale = Some(CreatePoint(exp.Scale, exp.Scale));\r\n                            Position = CreatePoint(exp.X, exp.Y);\r\n                    }\r\n            | _ -> entity\r\n\r\n"]}